@startuml Sequence_FastFlowAccel
'--- stile minimo ------------------------------------------------------
skinparam participantFontSize 10
skinparam sequenceMessageAlign center
'----------------------------------------------------------------------

'== Partecipanti =======================================================
participant "Upstream FF\nthread"       as Upstream
participant "ff_node_acc_t\n(main)"     as Node
participant "producerThread"            as Prod
participant "DeviceAdapter"             as Adp
participant "OpenCL\nruntime"           as OCL
participant "consumerThread"            as Cons
participant "Downstream FF\nthread"     as Down

'== Start-up ===========================================================
Upstream -> Node : svc_init()
activate Node
Node    -> Adp  : init()
Node    -> Prod : spawn()         <<create>>
activate Prod
Node    -> Cons : spawn()         <<create>>
activate Cons
Upstream <-- Node : return 0

'== Streaming dei task ================================================
loop per ogni Task
  Upstream -> Node : svc(task)
  Node     -> Prod : inQ_.push(task)
  Upstream <-- Node : GO_ON
end

'== Producer loop (device submit) =====================================
loop while !done_
  Prod -> Adp : prepareBuffers(task)
  Adp  -> OCL : enqueueWriteBuffer
  Prod -> Adp : launchKernel(task)
  Adp  -> OCL : enqueueNDRangeKernel
end

'== Consumer loop (device completion) =================================
loop while !done_ or pending
  Cons -> Adp : waitEvent()
  Adp  -> OCL : enqueueReadBuffer
  Cons -> Down : outQ_.push(result)
end

'== Shutdown ==========================================================
Upstream -> Node : svc(nullptr) / EOS
Node -> Prod : inQ_.push(nullptr)
Node -> Cons : done_ = true
Prod --> Node : join()
deactivate Prod
Cons --> Node : join()
deactivate Cons
Node -> Adp : cleanup()
Upstream <-- Node : EOS
deactivate Node
@enduml
